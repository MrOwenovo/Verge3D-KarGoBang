/**
 * Generated by Verge3D Puzzles v.3.9.0
 * Tue Sep 06 2022 06:51:11 GMT+0800 (中国标准时间)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = true;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {
  setHTMLElemStyle('display', 'none', 'close', true);
  loadMedia_HTML5('./chess1.mp3');
  loadMedia_HTML5('./chess2.mp3');
  loadMedia_HTML5('./pass.mp3');
  loadMedia_HTML5('./background.mp3');
  loadMedia_HTML5('./win.mp3');
  setHTMLElemStyle('display', 'none', 'gwd-p-vmkb2', true);
})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'gwd-p-vmkb', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemAttribute('innerHTML', '' + '点击加载条以开始', 'gwd-p-vmkb', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["chessDownMusic"] = chessDownMusic;
this.procedures["playBackground"] = playBackground;
this.procedures["randomLight"] = randomLight;
this.procedures["deleteBottom"] = deleteBottom;
this.procedures["reverse"] = reverse;
this.procedures["isWin"] = isWin;
this.procedures["winaction"] = winaction;
this.procedures["init"] = init;

var PROC = {
    "chessDownMusic": chessDownMusic,
    "playBackground": playBackground,
    "randomLight": randomLight,
    "deleteBottom": deleteBottom,
    "reverse": reverse,
    "isWin": isWin,
    "winaction": winaction,
    "init": init,
};

var canDo, White_E4_B8_80_E5_B1_821_1IsOn, Black_E4_B8_80_E5_B1_821_1IsOn, selectBottom, isClick, deep, startOutline, picked, now, White_E4_B8_80_E5_B1_821_2IsOn, Black_E4_B8_80_E5_B1_821_2IsOn, random, background, _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE, number, my_1_1dic, White_E4_B8_80_E5_B1_821_3IsOn, Black_E4_B8_80_E5_B1_821_3IsOn, w, j, my_1_2dic, White_E4_B8_80_E5_B1_821_4IsOn, Black_E4_B8_80_E5_B1_821_4IsOn, chess1, chess2, flag, list, k, my_1_3dic, White_E4_B8_80_E5_B1_821_5IsOn, Black_E4_B8_80_E5_B1_821_5IsOn, pass, index, i, my_1_4dic, White_E4_B8_80_E5_B1_822_1IsOn, Black_E4_B8_80_E5_B1_822_1IsOn, v, dic, my_1_5dic, White_E4_B8_80_E5_B1_822_2IsOn, Black_E4_B8_80_E5_B1_822_2IsOn, my_2_1dic, White_E4_B8_80_E5_B1_822_3IsOn, Black_E4_B8_80_E5_B1_822_3IsOn, my_2_2dic, White_E4_B8_80_E5_B1_822_4IsOn, Black_E4_B8_80_E5_B1_822_4IsOn, my_2_3dic, White_E4_B8_80_E5_B1_822_5IsOn, Black_E4_B8_80_E5_B1_822_5IsOn, my_2_4dic, White_E4_B8_80_E5_B1_823_1IsOn, Black_E4_B8_80_E5_B1_823_1IsOn, x, my_2_5dic, White_E4_B8_80_E5_B1_823_2IsOn, Black_E4_B8_80_E5_B1_823_2IsOn, y, my_3_1dic, White_E4_B8_80_E5_B1_823_3IsOn, Black_E4_B8_80_E5_B1_823_3IsOn, u, my_3_2dic, White_E4_B8_80_E5_B1_823_4IsOn, Black_E4_B8_80_E5_B1_823_4IsOn, my_3_3dic, White_E4_B8_80_E5_B1_823_5IsOn, Black_E4_B8_80_E5_B1_823_5IsOn, my_3_4dic, White_E4_B8_80_E5_B1_824_1IsOn, Black_E4_B8_80_E5_B1_824_1IsOn, my_3_5dic, White_E4_B8_80_E5_B1_824_2IsOn, Black_E4_B8_80_E5_B1_824_2IsOn, my_4_1dic, White_E4_B8_80_E5_B1_824_3IsOn, Black_E4_B8_80_E5_B1_824_3IsOn, my_4_2dic, White_E4_B8_80_E5_B1_824_4IsOn, Black_E4_B8_80_E5_B1_824_4IsOn, my_4_3dic, White_E4_B8_80_E5_B1_824_5IsOn, Black_E4_B8_80_E5_B1_824_5IsOn, my_4_4dic, White_E4_B8_80_E5_B1_825_1IsOn, Black_E4_B8_80_E5_B1_825_1IsOn, my_4_5dic, White_E4_B8_80_E5_B1_825_2IsOn, Black_E4_B8_80_E5_B1_825_2IsOn, my_5_1dic, White_E4_B8_80_E5_B1_825_3IsOn, Black_E4_B8_80_E5_B1_825_3IsOn, outlineFlag, my_5_2dic, White_E4_B8_80_E5_B1_825_4IsOn, Black_E4_B8_80_E5_B1_825_4IsOn, my_5_3dic, White_E4_B8_80_E5_B1_825_5IsOn, Black_E4_B8_80_E5_B1_825_5IsOn, my_5_4dic, m, my_5_5dic;


function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}


function mathRandomInt(a, b) {
  if (a > b) {
    // Swap a and b to ensure a is smaller.
    var c = a;
    a = b;
    b = c;
  }
  return Math.floor(Math.random() * (b - a + 1) + a);
}


// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}



// volume puzzle
function volume(mediaElem, volume) {
    if (!mediaElem)
        return;

    volume = Number(volume);
    if (Number.isNaN(volume)) {
        return;
    }

    mediaElem.setVolume(v3d.MathUtils.clamp(volume, 0.0, 1.0));
}


// Describe this function...
function chessDownMusic() {
  random = mathRandomInt(1, 3);
  if (random == 1) {
    chess1 = loadMedia_HTML5('./chess1.mp3');
    playSound(chess1, false);
    volume(chess1, 3);
  } else {
    chess2 = loadMedia_HTML5('./chess2.mp3');
    playSound(chess2, false);
    volume(chess2, 3);
  }
}

// Describe this function...
function playBackground() {
  background = loadMedia_HTML5('./background.mp3');
  playSound(background, true);
  volume(background, 0.4);
}


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// getObjTransform puzzle
function getObjTransform(objName, isWorldSpace, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (isWorldSpace && obj.parent) {
        if (mode === 'position') {
            transformVal = coordsTransform(obj.getWorldPosition(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'rotation') {
            transformVal = coordsTransform(obj.getWorldEuler(_pGlob.eulerTmp, 'XYZ'), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'scale') {
            transformVal = coordsTransform(obj.getWorldScale(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        }

    } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);

    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);

    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// getEntityByName puzzle
function getEntityByName(name, getWhat) {
    switch (getWhat) {
        case 'OBJECT':
        case 'ANIMATION':
        case 'MATERIAL':
            return name;
        case 'GROUP':
            return ['GROUP', name];
    }
}



// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}



// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}


// 随机生成发光点
function randomLight(deep) {
  _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE = [];
  var w_end = deep - 1;
  var w_inc = 1;
  if (0 > w_end) {
    w_inc = -w_inc;
  }
  for (w = 0; w_inc >= 0 ? w <= w_end : w >= w_end; w += w_inc) {
    _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE[w] = 'Hello, Verge!';
  }
  flag = true;
  index = 0;
  var v_end = deep - 1;
  var v_inc = 1;
  if (0 > v_end) {
    v_inc = -v_inc;
  }
  for (v = 0; v_inc >= 0 ? v <= v_end : v >= v_end; v += v_inc) {
    flag = true;
    index = 0;
    while (flag) {
      index = 0;
      x = mathRandomInt(0, 4);
      y = mathRandomInt(0, 4);
      var u_end = _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE.length - 1;
      var u_inc = 1;
      if (0 > u_end) {
        u_inc = -u_inc;
      }
      for (u = 0; u_inc >= 0 ? u <= u_end : u >= u_end; u += u_inc) {
        if (['棋盘',x + 1,'-',y + 1].join('') != _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE[u]) {
          index = index + 1;
        }
      }
      if (index == _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE.length) {
        flag = false;
      }
    }
    _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE[v] = ['棋盘',x + 1,'-',y + 1].join('');
    console.log([x + 1,'-',y + 1].join(''));
    reverse([x + 1,'-',y + 1].join(''));
  }
}

// Describe this function...
function deleteBottom() {
  playSound(loadMedia_HTML5('./win.mp3'), false);
  outline(['棋盘1-1', '棋盘1-2', '棋盘1-3', '棋盘1-4', '棋盘1-5', '棋盘2-1', '棋盘2-2', '棋盘2-3', '棋盘2-4', '棋盘2-5', '棋盘3-1', '棋盘3-2', '棋盘3-3', '棋盘3-4', '棋盘3-5', '棋盘4-1', '棋盘4-2', '棋盘4-3', '棋盘4-4', '棋盘4-5', '棋盘5-1', '棋盘5-2', '棋盘5-3', '棋盘5-4', '棋盘5-5'], 'DISABLE');
}


// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



// getObjectMaterial puzzle
function getObjectMaterial(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        obj = obj.resolveMultiMaterial()[0];

        if (obj.material && typeof obj.material.name == "string")
            return obj.material.name;
    }
    return '';
}



/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objSelector, matName) {
    var objNames = retrieveObjectNames(objSelector);
    if (!matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}


// Describe this function...
function reverse(picked) {
  if (canDo == true) {
    chessDownMusic();
    list = dictGet(dic, picked);
    var i_end = list.length - 1;
    var i_inc = 1;
    if (0 > i_end) {
      i_inc = -i_inc;
    }
    for (i = 0; i_inc >= 0 ? i <= i_end : i >= i_end; i += i_inc) {
      if (getObjectMaterial(list[i]) == '辉光') {
        assignMat(list[i], '白棋材质');
      } else if (getObjectMaterial(list[i]) != '辉光') {
        assignMat(list[i], '辉光');
      }
    }
    isWin();
  }
}


// removeTimer puzzle
function registerRemoveTimer(id) {
    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}



// sendData puzzle
function sendData(data, url, callback) {
    var req = new XMLHttpRequest();

    req.onreadystatechange = function() {
        if (req.readyState == 4 && req.status == 200) {
            if (req.getResponseHeader('Content-Type').indexOf('application/json') > -1)
                _pGlob.loadedFile = JSON.parse(req.responseText);
            else
                _pGlob.loadedFile = req.responseText;

            callback();
        }
    };

    req.open('POST', url, true);

    if (typeof data == 'string') {
        req.setRequestHeader('Content-type', 'text/plain');
    } else {
        // serialize to json
        req.setRequestHeader('Content-type', 'application/json');
        data = JSON.stringify(data);
    }

    req.send(data);
}




// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}


// Describe this function...
function isWin() {
  number = 0;
  for (j = 0; j <= 4; j++) {
    for (k = 0; k <= 4; k++) {
      if (getObjectMaterial(getEntityByName(['棋盘',j + 1,'-',k + 1].join(''), 'OBJECT')) != '辉光') {
        number = number + 1;
      }
    }
  }
  if (number == 25) {
    if (isClick == false) {
      registerRemoveTimer('myTimer');
      registerOnHover(['ALL_OBJECTS'], false, function() {
        if (_pGlob.hoveredObject != '黑色外壳' && _pGlob.hoveredObject != '棋盘表面.002') {
          outline(_pGlob.hoveredObject, 'ENABLE');
        }
      }, function() {
        if (_pGlob.hoveredObject != '棋盘表面.002') {
          if (_pGlob.hoveredObject != '黑色外壳' && _pGlob.hoveredObject != '棋盘表面.002') {
            outline(_pGlob.hoveredObject, 'DISABLE');
          }
        }
      });
    }
    isClick = true;
    console.log('结束了');
    deleteBottom();
    winaction();
    canDo = false;
    sendData(now, 'http://localhost/api/game/changePassNumber', function() {
      console.log('niu');
    });
    now = now + 1;
    registerSetTimeout(1, function() {
      setHTMLElemAttribute('innerHTML', ['第',now,'关'].join(''), 'gwd-p-vmkb2', true);
      canDo = true;
      init();
      if (now < 4) {
        randomLight(3);
      } else if (now < 8) {
        randomLight(4);
      } else if (now < 11) {
        randomLight(5);
      } else if (now < 14) {
        randomLight(6);
      } else if (now < 20) {
        randomLight(7);
      } else if (now < 25) {
        randomLight(8);
      } else {
        randomLight(9);
      }
    });
  }
}

// Describe this function...
function winaction() {
  playSound(loadMedia_HTML5('./win.mp3'), false);
  assignMat('棋盘3-3', '辉光');
  registerSetTimeout(0.2, function() {
    assignMat('棋盘3-3', '白棋材质');
    assignMat('棋盘2-2', '辉光');
    assignMat('棋盘2-3', '辉光');
    assignMat('棋盘2-4', '辉光');
    assignMat('棋盘3-2', '辉光');
    assignMat('棋盘3-4', '辉光');
    assignMat('棋盘4-2', '辉光');
    assignMat('棋盘4-3', '辉光');
    assignMat('棋盘4-4', '辉光');
    registerSetTimeout(0.2, function() {
      assignMat('棋盘2-2', '白棋材质');
      assignMat('棋盘2-3', '白棋材质');
      assignMat('棋盘2-4', '白棋材质');
      assignMat('棋盘3-2', '白棋材质');
      assignMat('棋盘3-4', '白棋材质');
      assignMat('棋盘4-2', '白棋材质');
      assignMat('棋盘4-3', '白棋材质');
      assignMat('棋盘4-4', '白棋材质');
      assignMat('棋盘1-1', '辉光');
      assignMat('棋盘1-2', '辉光');
      assignMat('棋盘1-3', '辉光');
      assignMat('棋盘1-4', '辉光');
      assignMat('棋盘1-5', '辉光');
      assignMat('棋盘2-1', '辉光');
      assignMat('棋盘2-5', '辉光');
      assignMat('棋盘3-1', '辉光');
      assignMat('棋盘3-5', '辉光');
      assignMat('棋盘4-1', '辉光');
      assignMat('棋盘4-5', '辉光');
      assignMat('棋盘5-1', '辉光');
      assignMat('棋盘5-2', '辉光');
      assignMat('棋盘5-3', '辉光');
      assignMat('棋盘5-4', '辉光');
      assignMat('棋盘5-5', '辉光');
      registerSetTimeout(0.2, function() {
        assignMat('棋盘1-1', '白棋材质');
        assignMat('棋盘1-2', '白棋材质');
        assignMat('棋盘1-3', '白棋材质');
        assignMat('棋盘1-4', '白棋材质');
        assignMat('棋盘1-5', '白棋材质');
        assignMat('棋盘2-1', '白棋材质');
        assignMat('棋盘2-5', '白棋材质');
        assignMat('棋盘3-1', '白棋材质');
        assignMat('棋盘3-5', '白棋材质');
        assignMat('棋盘4-1', '白棋材质');
        assignMat('棋盘4-5', '白棋材质');
        assignMat('棋盘5-1', '白棋材质');
        assignMat('棋盘5-2', '白棋材质');
        assignMat('棋盘5-3', '白棋材质');
        assignMat('棋盘5-4', '白棋材质');
        assignMat('棋盘5-5', '白棋材质');
      });
    });
  });
}


// dictSet puzzle
function dictSet(dict, key, value) {
    if (dict && typeof dict == 'object')
        dict[key] = value;
}


// Describe this function...
function init() {
  my_1_1dic = ['棋盘1-1', '棋盘1-2', '棋盘2-1'];
  my_1_2dic = ['棋盘1-1', '棋盘1-2', '棋盘1-3', '棋盘2-2'];
  my_1_3dic = ['棋盘1-3', '棋盘1-2', '棋盘1-4', '棋盘2-3'];
  my_1_4dic = ['棋盘1-3', '棋盘1-4', '棋盘1-5', '棋盘2-4'];
  my_1_5dic = ['棋盘1-4', '棋盘1-5', '棋盘2-5'];
  my_2_1dic = ['棋盘2-2', '棋盘1-1', '棋盘2-1', '棋盘3-1'];
  my_2_2dic = ['棋盘2-1', '棋盘2-2', '棋盘2-3', '棋盘1-2', '棋盘3-2'];
  my_2_3dic = ['棋盘2-2', '棋盘2-3', '棋盘2-4', '棋盘1-3', '棋盘3-3'];
  my_2_4dic = ['棋盘2-3', '棋盘2-4', '棋盘2-5', '棋盘3-4', '棋盘1-4'];
  my_2_5dic = ['棋盘2-4', '棋盘2-5', '棋盘1-5', '棋盘3-5'];
  my_3_1dic = ['棋盘3-1', '棋盘3-2', '棋盘2-1', '棋盘4-1'];
  my_3_2dic = ['棋盘3-1', '棋盘3-2', '棋盘2-2', '棋盘4-2', '棋盘3-3'];
  my_3_3dic = ['棋盘3-2', '棋盘3-3', '棋盘3-4', '棋盘4-3', '棋盘2-3'];
  my_3_4dic = ['棋盘3-3', '棋盘3-4', '棋盘3-5', '棋盘4-4', '棋盘2-4'];
  my_3_5dic = ['棋盘3-4', '棋盘3-5', '棋盘4-5', '棋盘2-5'];
  my_4_1dic = ['棋盘4-1', '棋盘4-2', '棋盘5-1', '棋盘3-1'];
  my_4_2dic = ['棋盘4-1', '棋盘4-2', '棋盘4-3', '棋盘3-2', '棋盘5-2'];
  my_4_3dic = ['棋盘4-2', '棋盘4-3', '棋盘4-4', '棋盘5-3', '棋盘3-3'];
  my_4_4dic = ['棋盘4-3', '棋盘4-4', '棋盘4-5', '棋盘5-4', '棋盘3-4'];
  my_4_5dic = ['棋盘4-4', '棋盘4-5', '棋盘5-5', '棋盘3-5'];
  my_5_1dic = ['棋盘5-1', '棋盘5-2', '棋盘4-1'];
  my_5_2dic = ['棋盘5-1', '棋盘5-2', '棋盘5-3', '棋盘4-2'];
  my_5_3dic = ['棋盘5-2', '棋盘5-3', '棋盘5-4', '棋盘4-3'];
  my_5_4dic = ['棋盘5-3', '棋盘5-4', '棋盘5-5', '棋盘4-4'];
  my_5_5dic = ['棋盘5-4', '棋盘5-5', '棋盘4-5'];
  dic = {};
  dictSet(dic, '1-1', my_1_1dic);
  dictSet(dic, '1-2', my_1_2dic);
  dictSet(dic, '1-3', my_1_3dic);
  dictSet(dic, '1-4', my_1_4dic);
  dictSet(dic, '1-5', my_1_5dic);
  dictSet(dic, '2-1', my_2_1dic);
  dictSet(dic, '2-2', my_2_2dic);
  dictSet(dic, '2-3', my_2_3dic);
  dictSet(dic, '2-4', my_2_4dic);
  dictSet(dic, '2-5', my_2_5dic);
  dictSet(dic, '3-1', my_3_1dic);
  dictSet(dic, '3-2', my_3_2dic);
  dictSet(dic, '3-3', my_3_3dic);
  dictSet(dic, '3-4', my_3_4dic);
  dictSet(dic, '3-5', my_3_5dic);
  dictSet(dic, '4-1', my_4_1dic);
  dictSet(dic, '4-2', my_4_2dic);
  dictSet(dic, '4-3', my_4_3dic);
  dictSet(dic, '4-4', my_4_4dic);
  dictSet(dic, '4-5', my_4_5dic);
  dictSet(dic, '5-1', my_5_1dic);
  dictSet(dic, '5-2', my_5_2dic);
  dictSet(dic, '5-3', my_5_3dic);
  dictSet(dic, '5-4', my_5_4dic);
  dictSet(dic, '5-5', my_5_5dic);
}


canDo = true;
init();
randomLight(3);
loadMedia_HTML5('./chess1.mp3');
loadMedia_HTML5('./chess2.mp3');
loadMedia_HTML5('./pass.mp3');
loadMedia_HTML5('./background.mp3');

White_E4_B8_80_E5_B1_821_1IsOn = 'false';
White_E4_B8_80_E5_B1_821_2IsOn = 'false';
White_E4_B8_80_E5_B1_821_3IsOn = 'false';
White_E4_B8_80_E5_B1_821_4IsOn = 'false';
White_E4_B8_80_E5_B1_821_5IsOn = 'false';
White_E4_B8_80_E5_B1_822_1IsOn = 'false';
White_E4_B8_80_E5_B1_822_2IsOn = 'false';
White_E4_B8_80_E5_B1_822_3IsOn = 'false';
White_E4_B8_80_E5_B1_822_4IsOn = 'false';
White_E4_B8_80_E5_B1_822_5IsOn = 'false';
White_E4_B8_80_E5_B1_823_1IsOn = 'false';
White_E4_B8_80_E5_B1_823_2IsOn = 'false';
White_E4_B8_80_E5_B1_823_3IsOn = 'false';
White_E4_B8_80_E5_B1_823_4IsOn = 'false';
White_E4_B8_80_E5_B1_823_5IsOn = 'false';
White_E4_B8_80_E5_B1_824_1IsOn = 'false';
White_E4_B8_80_E5_B1_824_2IsOn = 'false';
White_E4_B8_80_E5_B1_824_3IsOn = 'false';
White_E4_B8_80_E5_B1_824_4IsOn = 'false';
White_E4_B8_80_E5_B1_824_5IsOn = 'false';
White_E4_B8_80_E5_B1_825_1IsOn = 'false';
White_E4_B8_80_E5_B1_825_2IsOn = 'false';
White_E4_B8_80_E5_B1_825_3IsOn = 'false';
White_E4_B8_80_E5_B1_825_4IsOn = 'false';
White_E4_B8_80_E5_B1_825_5IsOn = 'false';

Black_E4_B8_80_E5_B1_821_1IsOn = 'false';
Black_E4_B8_80_E5_B1_821_2IsOn = 'false';
Black_E4_B8_80_E5_B1_821_3IsOn = 'false';
Black_E4_B8_80_E5_B1_821_4IsOn = 'false';
Black_E4_B8_80_E5_B1_821_5IsOn = 'false';
Black_E4_B8_80_E5_B1_822_1IsOn = 'false';
Black_E4_B8_80_E5_B1_822_2IsOn = 'false';
Black_E4_B8_80_E5_B1_822_3IsOn = 'false';
Black_E4_B8_80_E5_B1_822_4IsOn = 'false';
Black_E4_B8_80_E5_B1_822_5IsOn = 'false';
Black_E4_B8_80_E5_B1_823_1IsOn = 'false';
Black_E4_B8_80_E5_B1_823_2IsOn = 'false';
Black_E4_B8_80_E5_B1_823_3IsOn = 'false';
Black_E4_B8_80_E5_B1_823_4IsOn = 'false';
Black_E4_B8_80_E5_B1_823_5IsOn = 'false';
Black_E4_B8_80_E5_B1_824_1IsOn = 'false';
Black_E4_B8_80_E5_B1_824_2IsOn = 'false';
Black_E4_B8_80_E5_B1_824_3IsOn = 'false';
Black_E4_B8_80_E5_B1_824_4IsOn = 'false';
Black_E4_B8_80_E5_B1_824_5IsOn = 'false';
Black_E4_B8_80_E5_B1_825_1IsOn = 'false';
Black_E4_B8_80_E5_B1_825_2IsOn = 'false';
Black_E4_B8_80_E5_B1_825_3IsOn = 'false';
Black_E4_B8_80_E5_B1_825_4IsOn = 'false';
Black_E4_B8_80_E5_B1_825_5IsOn = 'false';

changeVis(['ALL_OBJECTS'], false);

registerOnClick('三层白棋2-3 ', false, false, [0,1,2], function() {}, function() {});

selectBottom = '棋盘5-4';

isClick = false;

eventHTMLElem('click', 'loading', true, function(event) {
  changeVis(['ALL_OBJECTS'], true);
  setHTMLElemStyle('display', 'none', 'loading', true);
  setHTMLElemStyle('display', 'none', 'gwd-p-vmkb', true);
  pass = loadMedia_HTML5('./pass.mp3');
  playSound(pass, false);
  volume(pass, 0.4);
  tweenCamera([getObjTransform('棋盘表面.002', false, 'position', 'x') + 0.14, getObjTransform('棋盘表面.002', false, 'position', 'y') + 0.7, getObjTransform('棋盘表面.002', false, 'position', 'z') + 5], [getObjTransform('棋盘3-3', false, 'position', 'x') + 0.14, getObjTransform('棋盘3-3', false, 'position', 'y') + 0.75, getObjTransform('棋盘3-3', false, 'position', 'z') + 0], 3, function() {
    playBackground();
    playSound(loadMedia_HTML5('./background.mp3'), true);
    setHTMLElemStyle('display', 'flex', 'all', true);
    setHTMLElemStyle('display', 'flex', 'close', true);
    setHTMLElemAttribute('innerHTML', '' + '点击以继续', 'gwd-p-vmkb', true);
    setHTMLElemStyle('position', 'absolute', 'gwd-p-vmkb', true);
    setHTMLElemStyle('display', 'flex', 'gwd-p-vmkb', true);
    setHTMLElemStyle('top', '30px', 'gwd-p-vmkb', true);
    eventHTMLElem('click', 'gwd-p-vmkb', true, function(event) {
      eventHTMLElem('click', 'gwd-p-vmkb', true, function(event) {});
      setHTMLElemStyle('display', 'none', 'all', true);
      setHTMLElemStyle('display', 'none', 'gwd-p-vmkb', true);
      volume(background, 0.9);
      setHTMLElemStyle('display', 'flex', 'gwd-p-vmkb2', true);
      outlineFlag = true;
      registerSetTimer('myTimer', 0.5, function() {
        if (outlineFlag == true) {
          for (var m_index in _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE) {
            m = _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE[m_index];
            console.log(m);
            outline(getEntityByName(m, 'OBJECT'), 'ENABLE');
            outlineFlag = false;
          }
        } else if (outlineFlag == false) {
          for (var m_index2 in _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE) {
            m = _E6_A3_8B_E7_9B_98_E4_BD_8D_E7_BD_AE[m_index2];
            console.log(m);
            outline(getEntityByName(m, 'OBJECT'), 'DISABLE');
            outlineFlag = true;
          }
        }
      }, Infinity);
      canDo = true;
    });
  }, 0);
});

registerOnClick('棋盘1-1', false, false, [0,1,2], function() {
  reverse('1-1');
}, function() {});
registerOnClick('棋盘1-2', false, false, [0,1,2], function() {
  reverse('1-2');
}, function() {});
registerOnClick('棋盘1-3', false, false, [0,1,2], function() {
  reverse('1-3');
}, function() {});
registerOnClick('棋盘1-4', false, false, [0,1,2], function() {
  reverse('1-4');
}, function() {});
registerOnClick('棋盘1-5', false, false, [0,1,2], function() {
  reverse('1-5');
}, function() {});
registerOnClick('棋盘2-1', false, false, [0,1,2], function() {
  reverse('2-1');
}, function() {});
registerOnClick('棋盘2-2', false, false, [0,1,2], function() {
  reverse('2-2');
}, function() {});
registerOnClick('棋盘2-3', false, false, [0,1,2], function() {
  reverse('2-3');
}, function() {});
registerOnClick('棋盘2-4', false, false, [0,1,2], function() {
  reverse('2-4');
}, function() {});
registerOnClick('棋盘2-5', false, false, [0,1,2], function() {
  reverse('2-5');
}, function() {});
registerOnClick('棋盘3-1', false, false, [0,1,2], function() {
  reverse('3-1');
}, function() {});
registerOnClick('棋盘3-2', false, false, [0,1,2], function() {
  reverse('3-2');
}, function() {});
registerOnClick('棋盘3-3', false, false, [0,1,2], function() {
  reverse('3-3');
}, function() {});
registerOnClick('棋盘3-4', false, false, [0,1,2], function() {
  reverse('3-4');
}, function() {});
registerOnClick('棋盘3-5', false, false, [0,1,2], function() {
  reverse('3-5');
}, function() {});
registerOnClick('棋盘4-1', false, false, [0,1,2], function() {
  reverse('4-1');
}, function() {});
registerOnClick('棋盘4-2', false, false, [0,1,2], function() {
  reverse('4-2');
}, function() {});
registerOnClick('棋盘4-3', false, false, [0,1,2], function() {
  reverse('4-3');
}, function() {});
registerOnClick('棋盘4-4', false, false, [0,1,2], function() {
  reverse('4-4');
}, function() {});
registerOnClick('棋盘4-5', false, false, [0,1,2], function() {
  reverse('4-5');
}, function() {});
registerOnClick('棋盘5-1', false, false, [0,1,2], function() {
  reverse('5-1');
}, function() {});
registerOnClick('棋盘5-2', false, false, [0,1,2], function() {
  reverse('5-2');
}, function() {});
registerOnClick('棋盘5-3', false, false, [0,1,2], function() {
  reverse('5-3');
}, function() {});
registerOnClick('棋盘5-4', false, false, [0,1,2], function() {
  reverse('5-4');
}, function() {});
registerOnClick('棋盘5-5', false, false, [0,1,2], function() {
  reverse('5-5');
}, function() {});

startOutline = [null, null, null];

now = 1;



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
